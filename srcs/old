
int	neg_to_pos(int nb)
{
	if (nb < 0)
		return -nb;
	return (nb);
}

int	revert_neg(int nb)
{
	if (nb > 0)
		return -nb;
	return (nb);
}

t_list	ft_merge_lists(t_list **a, t_list *neg, t_list *pos)
{
	// ft_printf("ft_merge_lists OK\n");
	*a = NULL;
	while (pos)
		ft_push_to_list(&pos, a);
	while(neg)
		ft_push_to_list(&neg, a);
	return (**a);
}

void	ft_negative(t_list **a, t_list **b)
{
	// ft_printf("ft_negative OK\n");

	t_list	*neg = NULL;
	t_list	*pos = NULL;

	// ft_printf("\nlist a : \n");
	// print_list(*a);

	while(*a)
	{
		if (*(int *)(*a)->content < 0)
			ft_push_to_list(a, &neg);
		else
			ft_push_to_list(a, &pos);
	}
	// ft_printf("\nlist neg : \n");
	// print_list(neg);
	// ft_printf("\nlist pos 1: \n");
	// print_list(pos);

	t_list *tmp = NULL;
	tmp = neg;

	// ft_printf("\nlist tmp 1: \n");
	// print_list(tmp);

	while(tmp)
	{
		*(int *)tmp->content = neg_to_pos(*(int *)tmp->content);
		tmp = tmp->next;
	}

	// ft_printf("\nlist tmp : \n");
	// print_list(tmp);
	// ft_printf("\nlist neg : \n");
	// print_list(neg);

	// ft_radix_sort(&neg, b);
	// ft_radix_sort(&pos, a);

	sort_stack(&neg, b);
	sort_stack(&pos, a);
	///////////////////////////////////////////////////////////////////////////
	// ft_printf("\nlist neg : \n");
	// print_list(neg);
	// ft_printf("\nlist pos : \n");
	// print_list(pos);

	tmp = neg;

	// ft_printf("\nlist neg : \n");
	// print_list(neg);

	while(tmp)
	{
		*(int *)tmp->content = revert_neg(*(int *)tmp->content);
		tmp = tmp->next;
	}

	// ft_printf("\nlist neg : \n");
	// print_list(neg);

	ft_merge_lists(a, neg, pos);
	// ft_printf("\nlist a : \n");
	// print_list(*a);
}

void	ft_push_to_list(t_list **src, t_list **dest)
{
	t_list *temp;
	t_list *current;
	t_list *previous = NULL;
	int		value;

	if(!src || !*src)
		return ;

	temp = *src;
	*src = (* src)->next;
	temp->next = NULL;
	value = *((int *)temp->content);

	if(!*dest)
	{
		*dest = temp;
		return ;
	}

	current = *dest;
	while(current && *((int *)current->content) < value)
	{
		previous = current;
		current = current->next;
	}

	if (!previous)
	{
		temp->next = *dest;
		*dest = temp;
	}
	else
	{
		previous->next = temp;
		temp->next = current;
	}
}


void	ft_radix_sort(t_list **a, t_list **b)
{
	// ft_printf("ft_radix_sort OK\n");

	int	bits;
	int	found_bits;

	bits = 0;
	found_bits = ft_max_bits(*a);
	while (bits < found_bits)
	{
		ft_sort_bits(a, b, bits);
		bits++;
	}
}

int	ft_max_bits(t_list *a)
{
	int	max_value;
	int	bits;
	int	compare_value;

	max_value = *((int *)(a->content));//pour le moment max a la valeur du 1er elmt de la liste
	bits = 0;

	while (a)
	{
		compare_value = *((int *)(a->content));//commence la comparaison a venir avec 1er elmt de la liste
		if(compare_value > max_value)
			max_value = compare_value;//on reajuste la valeur de max_value si compare_value est plus grand
		a = a->next;
	}
	while (max_value >> bits)
		bits++;//compte le nb de bits dans max_value
	return (bits);//retourne le nombre de bits dans la plus grande valeure
}

void	ft_sort_bits(t_list **a, t_list **b, int bits)
{
	int	size;
	int	i;
	int	moves_to_b;

	size = ft_lstsize(*a);
	i = 0;//"index" itere elmts de la liste
	moves_to_b = 0;//compter le nombre d'elmts dans b
	while(i++ < size)
	{
		if((*((int *)((*a)->content)) >> bits) & 1)//verifi si bit a comparer est 1
			ft_ra (a);
		else
		{
			ft_pb(a, b);
			moves_to_b++;
		}
	}
	while (moves_to_b-- > 0)//on remet les elmts de b dans a
		ft_pa (a, b);
}


void	sort_stack(t_list **a, t_list **b)
{
	int		list_size;

	list_size = ft_lstsize (*a);

	if (list_size == 0 || list_size == 1)
		return ;

	if (list_size == 2)
	{
		if (*((int *)(*a)->content) > *((int *)(*a)->next->content))
			ft_sa (a);
		return ;
	}

	// ft_printf("sort_stack OK\n");
	// ft_printf("list_size = %d\n", list_size);

	if (list_size <= 3)
		sort_three (a);
	// else if (list_size >= 4 && list_size <= 5)
	// 	sort_five (a, b);
	else if (list_size >= 4 && list_size <= 100)
		ft_radix_sort (a, b);
	else
	{
		write(2, "Error\n", 6);
		ft_lstclear (a, free);
		ft_lstclear (b, free);
	}
}


int	is_sorted(t_list *a)
{
	int	first;
	int	second;
	int	third;

	// ft_printf("is_sorted OK\n");

	first = *((int *)a->content);
	second = *((int *)a->next->content);
	third = *((int *)a->next->next->content);
	if (first < second && second < third)
		return (1);
	return (0);
}



