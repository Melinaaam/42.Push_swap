# Nom de l'exÃ©cutable
NAME = push_swap

# Compilateur
CC = cc

# Options de compilation
CFLAGS = -Wall -Wextra -Werror

# Chemin vers libft
LIBFT_DIR = libft
LIBFT = -L$(LIBFT_DIR) -lft

# Chemin vers les fichiers d'en-tÃªte
INCLUDES = -Iincludes -I$(LIBFT_DIR)/includes

# RÃ©pertoire pour les fichiers objets
OBJ_DIR = objets

# Fichiers sources et objets
SRCS = $(wildcard srcs/*.c)
OBJS = $(SRCS:srcs/%.c=$(OBJ_DIR)/%.o)

# Couleurs
PINK = \033[38;5;213m
RESET = \033[0m

# Texte en gras
BOLD := \033[1m

# RÃ¨gle par dÃ©faut
all: $(NAME)
	@echo "$(BOLD)$(PINK)ðŸŽ‰ Compile with success !!! ðŸŽ‰$(RESET)"

# Construction de l'exÃ©cutable
$(NAME): $(OBJS) $(LIBFT_DIR)/libft.a
	@$(CC) $(CFLAGS) $(OBJS) $(LIBFT) -o $(NAME)

# CrÃ©ation du rÃ©pertoire pour les objets si nÃ©cessaire
$(OBJ_DIR):
	@(mkdir -p $(OBJ_DIR))

# Compilation des fichiers source en fichiers objets
$(OBJ_DIR)/%.o: srcs/%.c | $(OBJ_DIR)
	@$(CC) $(CFLAGS) $(INCLUDES) -c $< -o $@

# Construction de la bibliothÃ¨que libft
$(LIBFT_DIR)/libft.a:
	@($(MAKE) -C $(LIBFT_DIR))

# Nettoyage des fichiers objets
clean:
	@rm -rf $(OBJ_DIR)
	@($(MAKE) -C $(LIBFT_DIR) clean)
	@echo "ðŸ§¹ Clean Over ! ðŸ§¹"

# Nettoyage complet (fichiers objets + exÃ©cutable)
fclean: clean
	@rm -f $(NAME)
	@($(MAKE) -C $(LIBFT_DIR) fclean)
	@echo "ðŸ§¼ All Clean Over !!! ðŸ§¼"

# Reconstruction complÃ¨te
re: fclean all

# DÃ©pendances
.PHONY: all clean fclean re
